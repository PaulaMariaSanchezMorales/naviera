@layout BlankLayout
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.Extensions.Configuration
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Http;
@using MySqlConnector
@using Clases

@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject SignInManager<LoginState> SignInManager
@inject IHostEnvironmentAuthenticationStateProvider HostAuthentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.Extensions.Configuration.IConfiguration config
@page "/Login"


<div class="container">
    <div class="row">
        <div class="col-sm-4 mb-3">
            <br />
            <br />
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e6/Maersk_Group_Logo.svg/1280px-Maersk_Group_Logo.svg.png" class="img-fluid" width="500" height="400">
            <br />
            <br />
        </div>
        <div class="col-sm-8 mb-3">
            <br />
            <br />
            <br />
            <div class="d-flex p-3 bd-highlight bg-tertiary"></div>
        </div>
    </div>
    <EditForm Model=@login>
        <div class="container">
            <div class="form-group">
                <h4 for="usuario">Código de empleado</h4>
                <InputText @bind-Value="login.Usuario" class="form-control" id="usuario" />
            </div>
            <div class="form-group">
                <h4 for="contraseña">Contraseña</h4>
                <InputText @bind-Value="login.Contraseña" class="form-control" id="contraseña" type="password" />
            </div>
            @if (login.Error is not null && login.Error != "")
            {
                <div class="form-group text-center text-white bg-danger Error">
                    <label>@login.Error</label>
                </div>
            }
            <div class="col-10 mb-3">
                <center>
                    <button class="btn btn-secondary text-dark btn-lg" @onclick="ingresar" role="button">Ingresar</button>
                </center>
            </div>
        </div>
    </EditForm>
</div>

@code
{
    //guardar los datos de la clase DataLogin
    private DataLogIn login = new DataLogIn();

    public async Task ingresar()
    {
        LoginState user = new LoginState();
        String connString = config.GetConnectionString("MySqlNaviera");
        // LoginState result = lee_usuarios(login.Usuario, login.Contraseña); //comprueba la contraseña y usuario ingresados
        var result = new LoginState();
        if (login.Usuario == "abc")
        {
            result.codigo = "123";
            result.nombre = "Marito";
            result.esAdministrador = true;
            result.error = "";
        }
        else
        {
            result.error = "Nel Pastel";
        }
        if (result.error == "")
        {

            ClaimsPrincipal principal = await SignInManager.CreateUserPrincipalAsync(user);
            SignInManager.Context.User = principal;
            HostAuthentication!.SetAuthenticationState(Task.FromResult(new AuthenticationState(principal)));
            // If you don't need doing anything without moving to next page, you can remove this.
            AuthenticationState authState = await AuthenticationStateProvider!.GetAuthenticationStateAsync();

            //var claims = new List<Claim>();
            //claims.Add(new Claim(ClaimTypes.Name, result.codigo));
            //claims.Add(new Claim("nombre", result.nombre));
            //if (result.esAdministrador)
            //    claims.Add(new Claim(ClaimTypes.Role, "Administrator"));
            //else
            //    claims.Add(new Claim(ClaimTypes.Role, "Usuario"));

            // var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            // var authProperties = new AuthenticationProperties();
            // await SignInManager.SignInAsync(result, authProperties);

            if (result.esAdministrador)
                NavManager.NavigateTo("/Personal");
            else
                NavManager.NavigateTo("/");
        }
    }

    public LoginState lee_usuarios(String usuario, String contraseña)
    {
        var loginState = new LoginState();
        loginState.codigo = login.Usuario;
        loginState.nombre = "";
        loginState.codigo = "";
        loginState.isLoggedIn = false;
        loginState.esAdministrador = false;
        login.Error = "";

        String connString = config.GetConnectionString("MySqlNaviera");
        using var connection = new MySqlConnection(connString);
        {
            connection.Open();

            string q = "";

            if (login.Usuario == "" || login.Contraseña == "")
            {
                login.Error = "Usuario o contraseña inválidos";
            }
            else
            {
                q = "SELECT * FROM usuarios";
                q = q + " where codigo ='" + login.Usuario + "' ";
                q = q + "and contraseña ='" + login.Contraseña + "'";

                using var command = new MySqlCommand(q, connection);
                using var reader = command.ExecuteReader();
                if (reader.Read())
                {
                    loginState.nombre = reader["Nombre"].ToString();
                    loginState.codigo = reader["Codigo"].ToString();
                    loginState.isLoggedIn = true;
                    if (reader["tipo_empleado"].ToString() == "Administrador")
                    {
                        loginState.esAdministrador = true;
                    }
                    else
                    {
                        loginState.esAdministrador = false;
                    }
                }
                else
                {
                    login.Error = "Usuario o contraseña inválidos";
                }
            }

        }
        return loginState;
    }
}
